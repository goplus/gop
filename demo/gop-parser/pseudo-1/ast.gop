import "gop/ast"

// Stmt - 语句
type Stmt interface {
}

// Type - 类型
type Type interface {
}

// Ident - 标识符（类型）
//
type Ident struct {
	Name string
}

// EmptyStmt - 空语句
type EmptyStmt struct {
}

// VarStmt - 变量声明语句
//
// DECLARE {变量名1}, {变量名2}... : {类型}
type VarStmt struct {
	Names []string
	Type  Type
}

// ConstStmt - 常量声明语句
//
// CONSTANT {常量名} <- {表达式}
type ConstStmt struct {
	Name  string
	Value ast.Expr
}

// AssignStmt - 赋值语句
//
// {变量名} <- {表达式}
type AssignStmt struct {
	Name  string
	Value ast.Expr
}

// OutputStmt - 输出语句
//
// OUTPUT {表达式}
type OutputStmt struct {
	Value ast.Expr
}

// InputStmt - 输入语句
//
// INPUT {变量名1}, {变量名2}...
type InputStmt struct {
	Names []string
}

// IfStmt - 条件语句
//
// IF {表达式} THEN
//	 {语句块}
// ELSE
//	 {语句块}
// ENDIF
type IfStmt struct {
	Cond ast.Expr
	Body []Stmt
	Else []Stmt // 可选
}

// WhileStmt - While循环语句
//
// WHILE {表达式} DO
//	 {语句块}
// ENDWHILE
type WhileStmt struct {
	Cond ast.Expr
	Body []Stmt
}

// UntilStmt - Until循环语句
//
// REPEAT
//	 {语句块}
// UNTIL {表达式}
type UntilStmt struct {
	Body []Stmt
	Cond ast.Expr
}
