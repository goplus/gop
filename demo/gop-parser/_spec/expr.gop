node Expr {
	exprNode()
}

node (
	Ident      Expr
	BasicLit   Expr
	CallExpr   Expr
	ParenExpr  Expr
	UnaryExpr  Expr
	BinaryExpr Expr
)

expr = x:termExpr *(binOp:("+" | "-") Y:termExpr as BinaryExpr {
	X: x
	OpPos: binOp.Pos
	Op: binOp.Tok
})

termExpr = x:unaryExpr *(binOp:("*" | "/" | "%") Y:unaryExpr as BinaryExpr {
	X: x
	OpPos: binOp.Pos
	Op: binOp.Tok
})

unaryExpr = primaryExpr | (uOp:("+" | "-" | "!" | "^") X:primaryExpr as UnaryExpr {
	OpPos: uOp.Pos
	Op: uOp.Tok
})

primaryExpr = operand *(lp:"(" ?(Args:(expr % ",") ?ell:"..." ?",") rp:")" as CallExpr {
	Fun: operand
	Lparen: lp.Pos
	Ellipsis: ell != nil ? ell.Pos : 0
	Rparen: rp.Pos
})

operand = BasicLit | Ident | ParenExpr

BasicLit = v:(INT | FLOAT | IMAG | CHAR | STRING) {
	ValuePos: v.Pos
	Kind: v.Tok
	Value: v.Lit
}

Ident = i:IDENT {
	NamePos: i.Pos
	Name: i.Lit
}

ParenExpr = lp:"(" X:expr rp:")" {
	Lparen: lp.Pos
	Rparen: rp.Pos
}
