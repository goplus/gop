import (
	"gop/tpl"
	"os"
)

func calc(e any) float64 {
	switch e := e.(type) {
	case *tpl.Token:
		return e.Lit.float!
	case []any:
		if x, ok := e[0].(*tpl.Token); ok && x.Tok == '-' {
			return -calc(e[1])
		}
		x := calc(e[0])
		for r <- e[1].([]any) {
			e := r.([]any)
			y := calc(e[1])
			switch e[0].(*tpl.Token).Tok {
			case '+':
				x += y
			case '-':
				x -= y
			case '*':
				x *= y
			case '/':
				x /= y
			}
		}
		return x
	}
	panic("unknown expression")
}

cl := tpl`
expr = termExpr % ("+" | "-")

termExpr = unaryExpr % ("*" | "/")

unaryExpr = operand | "-" unaryExpr

operand = INT | FLOAT | "(" expr ")"
`!

print "> "
for line <- os.Stdin {
	e, err := cl.parseExpr(line, nil)
	if err != nil {
		print "${err}\n> "
	} else {
		print "${calc(e)}\n> "
	}
}
