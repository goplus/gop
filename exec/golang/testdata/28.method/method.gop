type Person struct {
	Name    string
	Age     int
	Friends []string
}

func (p *Person) SetName(name string) {
	p.Name = name
	println(p.Name)
}

func (p *Person) SetAge(age int) {
	age = age + 5
	p.Age = age
	println(p.Age)
}

func (p *Person) AddFriends(args ...string) {
	p.Friends = append(p.Friends, args...)
}

type M int

func (m M) Foo() {
	println("foo", m)
}

p := &Person{
	Name: "bar",
	Age:  30,
}

p.Name, p.Age = "bar2", 31

a := int32(0)
m := M(a)

p.SetName("foo")
p.SetAge(32)
p.AddFriends("a", "b", "c")
m.Foo()

println(p.Name)
println(p.Age)
println(p.Friends)
println(m)

ar1 := make([]M, 1, 1)
ar1[0] = 10
ar1[0].Foo()

ar2 := [2]M{10, 11}
ar2[0].Foo()

ar3 := []M{12}
ar3[0].Foo()

m1 := make(map[int]M)
m1[0] = 13
m1[0].Foo()

m2 := map[int]M{0: 14}
m2[0].Foo()
