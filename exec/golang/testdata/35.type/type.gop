import "bytes"

type M int
type M2 int

func (m M) Foo() {
	println("foo", m)
}
func (m M2) Foo() {
	println("foo2", m)
}

type Pt struct {
	X M
	Y M2
}

func (p Pt) Test() {
	println("pt", p)
}

type Pt2 Pt

func (p Pt2) Test() {
	println("pt2", p)
}

type My interface{}
type Stringer interface {
	String() string
}
type TBuf bytes.Buffer
type T []int
type Func func(string) int

M(11).Foo()
var m M2
m = 12
m.Foo()

pt1 := &Pt{10, 20}
pt1.Test()
pt2 := &Pt2{30, 40}
pt2.Test()

var my My
my = m
println(my)

var buf TBuf
println(buf)

var ar T
ar = append(ar, 100, 200)
println(ar)

var fn Func = func(a string) int {
	return len(a)
}

var s Stringer = bytes.NewBuffer([]byte("hello"))
println(s)

println(fn("hello"))
