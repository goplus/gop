import "unsafe"

type SliceHeader struct {
	Data uintptr
	Len  int
	Cap  int
}
type StringHeader struct {
	Data uintptr
	Len  int
}

a := "hello"
b := []byte("world")
pa := (*StringHeader)(unsafe.Pointer(&a))
pb := (*SliceHeader)(unsafe.Pointer(&b))
println(*(*string)(unsafe.Pointer(pa)))
println(*(*[]byte)(unsafe.Pointer(pb)))

var c *byte = &b[0]
println(*(*byte)(unsafe.Pointer(uintptr(unsafe.Pointer(c)) + uintptr(1))))

ar1 := [unsafe.Alignof(pb)]int{}
ar2 := [unsafe.Offsetof(pb.Cap)]int{}
ar3 := [unsafe.Sizeof(*pb)]int{}
println(len(ar1), len(ar2), len(ar3))
